{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["'use server';\n\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getApps, initializeApp, getApp } from 'firebase-admin/app';\nimport { getFirestore } from 'firebase-admin/firestore';\n\n// Add known bot user agents to this list\nconst BOT_USER_AGENTS = [\n    'googlebot',\n    'bingbot',\n    'yahoo! slurp',\n    'duckduckbot',\n    'baiduspider',\n    'yandexbot',\n    'sogou',\n    'exabot',\n    'facebot',\n    'facebookexternalhit',\n    'twitterbot',\n    'linkedinbot',\n    'embedly',\n    'quora link preview',\n    'showyoubot',\n    'outbrain',\n    'pinterest',\n    'slackbot',\n    'vkshare',\n    'w3c_validator',\n    'redditbot',\n    'applebot',\n    'google-read-aloud',\n    'gptbot',\n    'google-extended',\n    'anthropic-ai',\n    'petalbot',\n    'omgilibot',\n    'omgili',\n    'cohere-ai',\n    'bytespider',\n    'ccbot',\n    'adidxbot'\n];\n\n// Initialize Firebase Admin SDK if not already initialized\nif (getApps().length === 0) {\n  initializeApp();\n}\nconst db = getFirestore();\n\nexport async function middleware(request: NextRequest) {\n  const userAgent = request.headers.get('user-agent')?.toLowerCase() || '';\n\n  // Check if the user agent is a known bot\n  const isBot = BOT_USER_AGENTS.some(bot => userAgent.includes(bot));\n\n  if (isBot) {\n    try {\n      // Asynchronously log bot visit to Firestore without blocking the request\n      const logPromise = db.collection('bot_scrapes').add({\n        url: request.nextUrl.pathname,\n        userAgent: userAgent,\n        timestamp: new Date(),\n        ip: request.ip,\n        headers: JSON.stringify(Object.fromEntries(request.headers.entries())),\n      });\n      // We don't await this promise to avoid delaying the response.\n      // This is a \"fire-and-forget\" operation.\n      logPromise.catch(console.error);\n\n    } catch (error) {\n      console.error('Error logging bot scrape to Firestore:', error);\n    }\n  }\n\n  // Continue with the request\n  return NextResponse.next();\n}\n\n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n}\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAEA;AACA;AALA;;;;AAOA,yCAAyC;AACzC,MAAM,kBAAkB;IACpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH;AAED,2DAA2D;AAC3D,IAAI,CAAA,GAAA,uKAAA,CAAA,UAAO,AAAD,IAAI,MAAM,KAAK,GAAG;IAC1B,CAAA,GAAA,uKAAA,CAAA,gBAAa,AAAD;AACd;AACA,MAAM,KAAK,CAAA,GAAA,6KAAA,CAAA,eAAY,AAAD;AAEf,eAAe,WAAW,OAAoB;IACnD,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,eAAe,iBAAiB;IAEtE,yCAAyC;IACzC,MAAM,QAAQ,gBAAgB,IAAI,CAAC,CAAA,MAAO,UAAU,QAAQ,CAAC;IAE7D,IAAI,OAAO;QACT,IAAI;YACF,yEAAyE;YACzE,MAAM,aAAa,GAAG,UAAU,CAAC,eAAe,GAAG,CAAC;gBAClD,KAAK,QAAQ,OAAO,CAAC,QAAQ;gBAC7B,WAAW;gBACX,WAAW,IAAI;gBACf,IAAI,QAAQ,EAAE;gBACd,SAAS,KAAK,SAAS,CAAC,OAAO,WAAW,CAAC,QAAQ,OAAO,CAAC,OAAO;YACpE;YACA,8DAA8D;YAC9D,yCAAyC;YACzC,WAAW,KAAK,CAAC,QAAQ,KAAK;QAEhC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0CAA0C;QAC1D;IACF;IAEA,4BAA4B;IAC5B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}