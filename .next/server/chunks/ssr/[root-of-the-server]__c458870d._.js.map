{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/availability-prediction.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agent that predicts the likelihood of a clinic having Wegovy or Mounjaro in stock.\n *\n * - predictAvailability - A function that handles the availability prediction process.\n * - PredictAvailabilityInput - The input type for the predictAvailability function.\n * - PredictAvailabilityOutput - The return type for the predictAvailability function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst PredictAvailabilityInputSchema = z.object({\n  clinicName: z.string().describe('The name of the clinic.'),\n  itemName: z.string().describe('The name of the item (Wegovy or Mounjaro).'),\n  historicalData: z.string().describe('Historical availability data for the clinic and item, including dates and reported statuses (e.g., \"2024-07-22: available\", \"2024-07-15: unavailable\").'),\n  userReports: z.string().describe('Recent user reports about the clinic and item availability, including verification status and vote counts (e.g., \"Report from 2 days ago (community-verified, 8 votes): available for 350,000 KRW\").'),\n  regionalTrends: z.string().describe('Current regional trends affecting availability (e.g., \"Overall supply in the region is tight.\").'),\n});\nexport type PredictAvailabilityInput = z.infer<typeof PredictAvailabilityInputSchema>;\n\nconst PredictAvailabilityOutputSchema = z.object({\n  probabilityScore: z.number().min(0).max(1).describe('The predicted probability (0 to 1) of the clinic having the item in stock.'),\n  reasoning: z.string().describe('A brief, one-sentence explanation for the prediction, written in Korean.'),\n});\nexport type PredictAvailabilityOutput = z.infer<typeof PredictAvailabilityOutputSchema>;\n\nexport async function predictAvailability(input: PredictAvailabilityInput): Promise<PredictAvailabilityOutput> {\n  return predictAvailabilityFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'predictAvailabilityPrompt',\n  input: {schema: PredictAvailabilityInputSchema},\n  output: {schema: PredictAvailabilityOutputSchema},\n  prompt: `You are an AI assistant specializing in predicting the availability of medications at specific clinics based on crowdsourced data. Your response must be in Korean.\n\n  Analyze the following information to provide a probability score (from 0.0 to 1.0) of stock availability. Also, provide a brief, one-sentence explanation for your reasoning in Korean.\n\n  - Clinic: {{{clinicName}}}\n  - Medication: {{{itemName}}}\n  - Historical Data: {{{historicalData}}}\n  - Recent User Reports: {{{userReports}}}\n  - Regional Trends: {{{regionalTrends}}}\n\n  **Reasoning Guide:**\n  - A recent 'available' report from a verified source (admin or community) with positive votes is a strong positive signal.\n  - A recent 'unavailable' report is a strong negative signal.\n  - Older data is less reliable than recent data. A report from today is much more valuable than one from 3 weeks ago.\n  - High vote counts on a report increase its credibility.\n  - If there is no recent data (e.g., older than 2-3 weeks) or only unverified reports, the prediction is uncertain. In such cases, the score should be around 0.5, and the reasoning should mention the lack of recent, reliable data.\n  - If all data points are negative (e.g., 'unavailable', 'out of stock'), the score should be very low (e.g., < 0.1).\n  - If recent, verified data is positive, the score should be high (e.g., > 0.8).\n  \n  Provide only the JSON output.\n`,\n});\n\nconst predictAvailabilityFlow = ai.defineFlow(\n  {\n    name: 'predictAvailabilityFlow',\n    inputSchema: PredictAvailabilityInputSchema,\n    outputSchema: PredictAvailabilityOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;IACpD,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;AAoBX,CAAC;AACD;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAxCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {predictAvailability as '400699113da48f30cd7b9e42e88cb3b6590270b6bb'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}